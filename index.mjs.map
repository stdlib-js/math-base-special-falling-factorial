{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006, 2010.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gammaDeltaRatio from '@stdlib/math-base-special-gamma-delta-ratio';\nimport floor from '@stdlib/math-base-special-floor';\nimport abs from '@stdlib/math-base-special-abs';\nimport FLOAT64_MAX from '@stdlib/constants-float64-max';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar MAX_FACTORIAL = 170; // TODO: consider packaging as constant\n\n\n// FUNCTIONS //\n\n/**\n* Computes the rising factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The rising factorial is defined as\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n*     or equivalently\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = \\frac{ \\Gamma(x + n) }{ \\Gamma(x) };\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {integer} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = risingFactorial( 0.9, 5 );\n* // returns ~94.766\n*\n* @example\n* var v = risingFactorial( -9.0, 3 );\n* // returns -504.0\n*\n* @example\n* var v = risingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = risingFactorial( 3.0, -2 );\n* // returns 0.5\n*/\nfunction risingFactorial( x, n ) {\n\tvar result;\n\tvar inv;\n\n\tif ( isnan( x ) || !isInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:\n\t\tif ( n < 0.0 ) {\n\t\t\tx += n;\n\t\t\tn = -n;\n\t\t\tinv = true;\n\t\t}\n\t\tresult = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );\n\t\tif ( inv ) {\n\t\t\tresult = 1.0 / result;\n\t\t}\n\t\treturn result;\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( n < 0 ) {\n\t\t\treturn -gammaDeltaRatio( x+1.0, -n );\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( x < 1.0 && x+n < 0.0 ) {\n\t\tresult = gammaDeltaRatio( 1.0-x, -n );\n\t\treturn ( n&1 ) ? -result : result;\n\t}\n\t// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn 1.0 / gammaDeltaRatio( x, n );\n}\n\n\n// MAIN //\n\n/**\n* Computes the falling factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The falling factorial is defined as\n*\n*     ```tex\n*     \\operatorname{fallingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {NonNegativeInteger} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = fallingFactorial( 0.9, 5 );\n* // returns ~0.644\n*\n* @example\n* var v = fallingFactorial( -9.0, 3 );\n* // returns -990.0\n*\n* @example\n* var v = fallingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = fallingFactorial( 3.0, -2 );\n* // returns NaN\n*/\nfunction fallingFactorial( x, n ) {\n\tvar result;\n\tvar xp1;\n\tvar n2;\n\tvar t1;\n\tvar t2;\n\n\tif ( isnan( x ) || !isNonNegativeInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a rising factorial modulo a possible change of sign:\n\t\treturn ( ( n&1 ) ? -1.0 : 1.0 ) * risingFactorial( -x, n );\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.5 ) {\n\t\t// Computing `1 + x` will throw away digits, so split up calculation...\n\t\tif ( n > MAX_FACTORIAL-2 ) {\n\t\t\t// Given a ratio of two very large numbers, we need to split the calculation up into two blocks:\n\t\t\tt1 = x * fallingFactorial( x-1.0, MAX_FACTORIAL-2 );\n\t\t\tt2 = fallingFactorial( x-MAX_FACTORIAL+1.0, n-MAX_FACTORIAL+1 );\n\t\t\tif ( FLOAT64_MAX/abs(t1) < abs(t2) ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\treturn t1 * t2;\n\t\t}\n\t\treturn x * fallingFactorial( x-1.0, n-1.0 );\n\t}\n\tif ( x <= n-1.0 ) {\n\t\t// `x+1-n` will be negative and computing the ratio of two gammas will not work, so split the product up into three parts:\n\t\txp1 = x + 1.0;\n\t\tn2 = abs( floor( xp1 ) );\n\t\tif ( n2 === xp1 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tresult = gammaDeltaRatio( xp1, -n2 );\n\t\tx -= n2;\n\t\tresult *= x;\n\t\tn2 += 1.0;\n\t\tif ( n2 < n ) {\n\t\t\tresult *= fallingFactorial( x-1.0, n-n2 );\n\t\t}\n\t\treturn result;\n\t}\n\t// Simple case: just the ratio of two (positive argument) gamma functions. Note that we don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn gammaDeltaRatio( x+1.0, -n );\n}\n\n\n// EXPORTS //\n\nexport default fallingFactorial;\n"],"names":["fallingFactorial","x","n","result","xp1","n2","t1","t2","isnan","isNonNegativeInteger","NaN","inv","isInteger","gammaDeltaRatio","risingFactorial","MAX_FACTORIAL","FLOAT64_MAX","abs","PINF","floor"],"mappings":";;iwBAgKA,SAASA,EAAkBC,EAAGC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAKC,EAAOP,KAAQQ,EAAsBP,GAClCQ,IAEG,IAANT,EACG,EAEHA,EAAI,GAEK,EAAFC,GAAS,EAAM,GAtF5B,SAA0BD,EAAGC,GAC5B,IAAIC,EACAQ,EAEJ,OAAKH,EAAOP,KAAQW,EAAWV,GACvBQ,IAEHT,EAAI,GAEHC,EAAI,IACRD,GAAKC,EACLA,GAAKA,EACLS,GAAM,GAEPR,GAAc,EAAFD,GAAQ,EAAM,GAAQF,GAAmBC,EAAGC,GACnDS,IACJR,EAAS,EAAMA,GAETA,GAEG,IAAND,EACG,EAEG,IAAND,EACCC,EAAI,GACAW,EAAiBZ,EAAE,GAAMC,GAE3B,EAEHD,EAAI,GAAOA,EAAEC,EAAI,GACrBC,EAASU,EAAiB,EAAIZ,GAAIC,GACvB,EAAFA,GAASC,EAASA,GAGrB,EAAMU,EAAiBZ,EAAGC,EAClC,CAmDoCY,EAAkBb,EAAGC,GAE7C,IAANA,EACG,EAEHD,EAAI,GAEHC,EAAIa,KAERT,EAAKL,EAAID,EAAkBC,EAAE,EAAKc,KAClCR,EAAKP,EAAkBC,EA1IN,IA0IsB,EAAKC,EA1I3B,IA0I2C,GACvDc,EAAYC,EAAIX,GAAMW,EAAIV,GACvBW,EAEDZ,EAAKC,GAENN,EAAID,EAAkBC,EAAE,EAAKC,EAAE,GAElCD,GAAKC,EAAE,GAGXG,EAAKY,EAAKE,EADVf,EAAMH,EAAI,OAEEG,EACJ,GAERD,EAASU,EAAiBT,GAAMC,GAEhCF,GADAF,GAAKI,GAELA,GAAM,GACIH,IACTC,GAAUH,EAAkBC,EAAE,EAAKC,EAAEG,IAE/BF,GAGDU,EAAiBZ,EAAE,GAAMC,EACjC"}